#!/usr/bin/env node

// bring in our express app + debug util + http + my ws server
const app = require('../app');
var debug = require('debug')('server:server');
const http = require('http');
const { startWebSocketServer } = require('../ws');

// grab port from env (or just default to 3000) and tell express about it
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// actually spin up the HTTP server, attach express to it
const server = http.createServer(app);

// also attach my WebSocket server to the same http server
startWebSocketServer(server, app.locals);

// only call listen once (had this duplicated before which caused issues)
server.listen(port);

// set up listeners so I can see errors and a "listening" message
server.on('error', onError);
server.on('listening', onListening);

// helper function: normalise a port number so node can bind to it
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val; // if it's not a number, treat as named pipe
  if (port >= 0) return port;  // valid port number
  return false;
}

// if something goes wrong when trying to listen, handle it nicely
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

// when the server actually starts listening, log something helpful
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server up and running at http://localhost:${addr.port}`);
}
